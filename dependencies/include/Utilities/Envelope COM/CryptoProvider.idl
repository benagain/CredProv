/// \file
/// CryptoProvider interface
/// This should be imported by Envelope COM and supporting components

import "oaidl.idl";
import "ocidl.idl";

[
	object,
	uuid(ACFE951D-E2B6-48F4-84AD-67F16E42029D),
	dual,
	helpstring("ICryptoProvider Interface"),
	pointer_default(unique)
]
interface ICryptoProvider : IDispatch
{
	typedef [helpstring("Crypto provider type enum")] 
	enum tagESignatureType
	{
		PT_Unknown	= 0,
		PT_Device	= 1,
		PT_Software	= 2,
		PT_Server	= 3
	} ESignatureType;

	[id(1), helpstring("method Encrypt")] HRESULT Encrypt([in] BSTR bstrClearText, [in] BSTR bstrSN, [in] BSTR bstrKeyName, [out, retval] BSTR * bstrCipherText);
	[id(2), helpstring("method Decrypt")] HRESULT Decrypt([in] BSTR bstrCipherText, [in] BSTR bstrSN, [in] BSTR bstrKeyName, [out, retval] BSTR * bstrClearText);
	[id(3), helpstring("method Sign")] HRESULT Sign([in] BSTR bstrText, [in] BSTR bstrSN, [in] BSTR bstrKeyName, [out, retval] BSTR * bstrSigBlock);
	[id(4), helpstring("method Verify")] HRESULT Verify([in] BSTR bstrText, [in] BSTR bstrSN, [in] BSTR bstrKeyName, [in] BSTR bstrSigBlock);
	[id(5), helpstring("method DecryptEx")] HRESULT DecryptEx([in] BSTR xmlInput, [out, retval] BSTR *bstrClearText);
	[id(6), helpstring("method SignEx")] HRESULT SignEx([in] BSTR xmlInput, [out, retval] BSTR *bstrSigBlock);
	[id(7), helpstring("property SignatureType")] HRESULT SignatureType([out, retval] ESignatureType *eType);

};

[
	object,
	uuid(1728FC0B-C2AD-4511-B7BA-65445EDBBBDD),
	dual,
	helpstring("ICryptoProvider2 Interface"),
	pointer_default(unique)
]
interface ICryptoProvider2 : ICryptoProvider
{
	/*!
	* Provides a set of recognised envelope versions on the server and whether they are supported
	*
	* \param[in] xmlInput
	*   \code{.xml}
	*     <Parameters
	*       <EnvelopeVersions Supported="YES|PARTIAL|NO">
	*         <Envelope Version="1.2" Supported="YES|PARTIAL|NO"/>
	*         <Envelope Version="1.3" Supported="YES|PARTIAL|NO"/>
	*         <!--  List all Envelope Versions allowable on this server-->
	*       </EnvelopeVersions>
	*     </Parameters>
	*   \endcode
	*
	* \param[out] xmlOut
	*   \code{.xml}
	*     </Parameters>
	*   \endcode
	*
	* \return
	*   \c S_OK on success, \c E_FAIL if no supported envelope versions are found that the object
	*   implementing this interface recognises
	*/
	[id(8), helpstring("method SetEnvelopeVersions")] HRESULT SetEnvelopeVersions([in] BSTR xmlInput, [out, retval] BSTR *xmlOut);

	[propget, id(9), helpstring("property LastEnvelopeVersion")] HRESULT LastEnvelopeVersion([out, retval] BSTR* pVal);

	/*!
	* Set the last envelope version to a specific value, this should be called ahead of a call to
	* any verify function to indicate the version of the envelope being verified.
	*
	* This method will implicitly set the LastSignatureHashAlgorithm, LastSignatureAlgorithm and
	* LastEncryptionAlgorithm values to the defaults for that envelope version, however these can
	* be overridden by subsequently calling their respective put methods if necessary
	*/
	[propput, id(9), helpstring("property LastEnvelopeVersion")] HRESULT LastEnvelopeVersion([in] BSTR Val);
	[propget, id(10), helpstring("property LastSignatureHashAlgorithm")] HRESULT LastSignatureHashAlgorithm([out, retval] BSTR* pVal);
	[propput, id(10), helpstring("property LastSignatureHashAlgorithm")] HRESULT LastSignatureHashAlgorithm([in] BSTR Val);
	[propget, id(11), helpstring("property LastSignatureAlgorithm")] HRESULT LastSignatureAlgorithm([out, retval] BSTR* pVal);
	[propput, id(11), helpstring("property LastSignatureAlgorithm")] HRESULT LastSignatureAlgorithm([in] BSTR Val);
	[propget, id(12), helpstring("property LastEncryptionAlgorithm")] HRESULT LastEncryptionAlgorithm([out, retval] BSTR* pVal);
	[propput, id(12), helpstring("property LastEncryptionAlgorithm")] HRESULT LastEncryptionAlgorithm([in] BSTR Val);
}
