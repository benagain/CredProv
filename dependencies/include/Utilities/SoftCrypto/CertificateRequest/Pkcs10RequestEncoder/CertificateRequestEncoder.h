#pragma once

#include <vector>
#include <boost/shared_ptr.hpp>
#include "Utilities\EdeficeCommon\ASN1Extensions.h"
#include "Utilities\EdeficeCommon\XmlNode.h"
#include "Utilities/Softcrypto/IncludeCardmod.h"

struct _CERT_PUBLIC_KEY_INFO;
struct _CERT_REQUEST_INFO;
class Pkcs10RequestSigner;

/** Creates a certificate request (PKCS#10) object

Can either fill in the details of the certificate from an XML document or by using the mutator methods.
  minimum data requirements are a valid DN (Directory Name) and a public key.
  
Unsigned requests are generated by the encode method, signed requests by the signedEncode method.
 */
class Pkcs10RequestEncoder  
{
public:
	enum Endian
	{
		big_endian,
		little_endian
	};

	enum Keys
	{
		RSA,
		ECC
	};

	enum Signer
	{
		KeyExchange = AT_KEYEXCHANGE,
		Signature = AT_SIGNATURE,
		ECS256 = AT_ECDSA_P256,
		ECS384 = AT_ECDSA_P384,
		ECS521 = AT_ECDSA_P521,
		ECH256 = AT_ECDHE_P256,
		ECH384 = AT_ECDHE_P384,
		ECH521 = AT_ECDHE_P521
	};

	Pkcs10RequestEncoder(Endian = big_endian, bool bNoASN1Auto = false, Keys = RSA, Signer = KeyExchange);
	virtual ~Pkcs10RequestEncoder();

	void setDn(const std::wstring& dn);
	void setPublicKey(const std::wstring& keyName, unsigned long exponent, const VectorOfByte& modulus);
	void setRSAPublicKey(const std::wstring& keyName, unsigned long exponent, const VectorOfByte& modulus);
	void setECCPublicKey(const std::wstring& keyName, const VectorOfByte& publicKey);

	VectorOfBytePtr encode() const;
	VectorOfBytePtr signedEncode(Pkcs10RequestSigner& signer) const;
	void addExtension(CASN1ExtensionPtr pAttribute);

	void EndianType(Endian type);
	Endian EndianType();

	void KeyType(Keys type);
	Keys KeyType();

	void SignerType(Signer type);
	void SignerType(long type);
	Signer SignerType();

	virtual VectorOfBytePtr encodePublicKey(VectorOfByte const & publicKey); 

protected:
	VectorOfBytePtr encodeDn(std::wstring const& dn);
	VectorOfBytePtr encodePublicKeyFromModulus(unsigned long exponent, VectorOfByte const& modulus);

	VectorOfBytePtr encodeCertRequest(_CERT_REQUEST_INFO const& request) const;
	VectorOfBytePtr encodedRequestSignature( VectorOfByte const & encodedCertRequest, Pkcs10RequestSigner& signer) const;
	VectorOfBytePtr internalEncode(unsigned long encodingType, char const* dataType, const void* data) const;
	void correctEndian( VectorOfByte & data  ) const;
	CryptAttributeList encodeAttributes() const;
	CryptAttributePtr encodeExtensions() const;
	CryptAttributePtr encodeOsVersion() const;
	CryptAttributePtr encodeClientInformation() const;

private:
	Endian m_endian;
	VectorOfBytePtr m_encodedDn;
	VectorOfBytePtr m_encodedPublicKey;
	std::wstring m_keyName;
	bool m_bNoASN1Auto;

	CASN1ExtensionsPtr m_extensions;

	Keys m_keyType;
	Signer m_signer;
};

class Pkcs10RequestExtender
{
public:
	void operator()(Pkcs10RequestEncoder & p10, eXML::IXMLDOMDocumentPtr & extensionDetails);
};
