<project name="UMCCommon"
		xmlns:ivy="antlib:org.apache.ivy.ant"
		xmlns:if="ant:if"
		xmlns:unless="ant:unless" >

	<import file="build_platform.xml" />

	<target name="Jenkins" description="Jenkins build and test all" >
		<antcall target="resolve" />
		<antcall target="build-all" />
		<antcall target="test" />
		<antcall target="publish-snapshot" />
	</target>

	<target name="CopyTLB">
		<condition property="tlbname" value="${umc.TLBname}" else="${moduleName}">
			<isset property="umc.TLBname"/>
		</condition>

		<!-- try all possible locations, only one will contain the TLB file -->
		<copy todir="${base.dir}/Com/${compiler.version}" failonerror="false" quiet="true" flatten="true">
			<fileset dir="${dependency.dir}/include" casesensitive="false" >
				<include name="UMC/Components/Interfaces/${tlbname}/${compiler.version}/${tlbname}.tlb"/>
				<include name="Utilities/${tlbname}/${compiler.version}/${tlbname}.tlb"/>
				<include name="Utilities/CertificateRequest/${tlbname}/${compiler.version}/${tlbname}.tlb"/>
			</fileset>
		</copy>
	</target>

	<!-- Creates a version header file based on the next artifactory version number to be published. -->
	<target name="make-version" depends="prepare-publish-snapshot-without-credentials, ivy-new-version, AntContrib.import"
			extensionOf="resolve.postRetrieve">
		<property name="version.filename" value="ivy-version.h" />

		<!-- In future the UMC major.minor might come through here too... -->
		<!-- Read the artifact second digits of the version number for both trunk and branched versions x.XX or x.XX.xx and set FILE_REVISION -->
		<propertyregex property="version.revision" input="${ivy.new.revision}" regexp="^\d+\.(\d+)" select="\1" />
		<!-- If the artifact is branched we should have 3 digits for the version x.xx.XX read and set BUILD_NUMMBER -->
		<propertyregex property="version.buildNumber" input="${ivy.new.revision}" regexp="^\d+\.\d+\.(\d+)$" select="\1" />

		<echo file="${version.filename}">// This file is automatically generated by ant build scripts${line.separator}</echo>
		<echo file="${version.filename}" append="true">#define FILE_REVISION ${version.revision}${line.separator}</echo>
		<!-- DEBUG: <echo>#define FILE_REVISION ${version.revision}${line.separator}</echo> -->

		<!-- Check if the 3 digit in the artifact version is set, and use it for the BUILD_NUMBER -->
		<if>
			<isset property="version.buildNumber" />
			<then>
				<echo file="${version.filename}" append="true">#define BUILD_NUMBER ${version.buildNumber}${line.separator}</echo>
			</then>
			<else>
				<!-- Trunk builds always have a zero as the BUILD_VERSION -->
				<echo file="${version.filename}" append="true">#define BUILD_NUMBER 0${line.separator}</echo>
			</else>
		</if>
	</target>

	<macrodef name="moduleZipPlatform">
		<attribute name="platform" />
		<attribute name="dirPattern" />
		<attribute name="compDir" />
		<attribute name="zipSuffix" />
		<attribute name="excludes" default="" />
		<sequential>
			<zip destfile="${ivy.zip.dir}/${moduleName}_@{platform}_@{zipSuffix}.zip" whenempty="${zip.whenempty}">
				<zipfileset
						dir="${base.dir}/Com"
						includes="@{compDir}/@{dirPattern}/*.dll @{compDir}/@{dirPattern}/*.pdb @{compDir}/@{dirPattern}/*.tlb"
						excludes="@{excludes}" />
				<zipfileset
						dir="${base.dir}/Lib"
						includes="@{compDir}/@{dirPattern}/*.lib @{compDir}/@{dirPattern}/*.pdb"
						excludes="@{excludes}" />
				<zipfileset
						dir="${base.dir}/Tests"
						includes="@{compDir}/@{dirPattern}/*.exe @{compDir}/@{dirPattern}/*.pdb"
						excludes="@{excludes}" />
			</zip>
		</sequential>
	</macrodef>
	
	<target name="moduleZip">
		<antcall target="PlatformCommon.moduleZip">
			<param name="zipPrefix" value="UMC\Components" />
			<param name="zipAdditionalExcludes" value="**/Com/*.h **/Tests/*.h" />
		</antcall>
	</target>
	
</project>